% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/translate.R
\name{translate}
\alias{translate}
\title{Translates a R function into a C++ function and returns an external pointer (XPtr) to this function.}
\usage{
translate(f, verbose = FALSE, reference = FALSE)
}
\arguments{
\item{f}{The function which should be translated from R to C++.}

\item{verbose}{If set to true the output of RcppXPtrUtils::cppXPtr is printed.}

\item{reference}{If set to true the arguments are passed by reference.}
}
\value{
The external pointer of the generated C++ function
}
\description{
Translates a R function into a C++ function and returns an external pointer (XPtr) to this function.
}
\details{
The following functions are supported:

For assignment: = and <- can be used.

In order to allocate memory the functions: vector and matrix can be used.
Following forms are possible: vector(size_of_elements), vector(value, size_of_elements)
matrix(nrows, ncols), matrix(value, nrows, ncols). The latter fills the matrix or the vector with the specified 'value'.

In order to get information about a vector or a matrix the functions length and dim work the same way as in R.

Basic operations can be conducted on scalars, vectors and matrices +, -, *, /

For indices squared brackets  '[]' are used as in R.

Mathematical functions: sin, asin, sinh, cos, acos, cosh, tan, atan, tanh, log, ^ and exp

For loops can be written as used in R 'for(index in whatever){}'.

To concatenate objects use the 'c' function as usually in R.

if,else if, else are used in the same way as in R

For comparison the functions ==, !=, >, <, >= and <= can be used for scalars, vectors and matrices.

The print function accepts either a scalar, vector, matrix, string, bool or nothing (empty line).

In order to return an object use the 'return' function (The last object is not returned automatically as in R).

Be aware that the R code is translated to ETR. An expression template library which tries to mimic R.

However, it does not behave exactly like R! Please check your compiled function before using it in a serious project.

If you want to see how ETR differs from R in detail check the vignette: 'Expression template R (ETR)'
}
\examples{
#Further examples can be found in vignette: 'Examples'
#Hello World
f <- function() { print("Hello World!")}
pointer_to_f_cpp <- ast2ast::translate(f)
Rcpp::sourceCpp(code = "
#include <Rcpp.h>
typedef void (*fp)();

// [[Rcpp::export]]
void call_fct(Rcpp::XPtr<fp> inp) {
  fp f = *inp;
  f();
}
")
call_fct(pointer_to_f_cpp)
}
