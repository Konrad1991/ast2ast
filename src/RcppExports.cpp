// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// bubbleSort
SEXP bubbleSort(SEXP aSEXP);
RcppExport SEXP _ast2ast_bubbleSort(SEXP aSEXPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type aSEXP(aSEXPSEXP);
    rcpp_result_gen = Rcpp::wrap(bubbleSort(aSEXP));
    return rcpp_result_gen;
END_RCPP
}
// fibonacci
SEXP fibonacci();
RcppExport SEXP _ast2ast_fibonacci() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(fibonacci());
    return rcpp_result_gen;
END_RCPP
}
// randomStuff1
SEXP randomStuff1();
RcppExport SEXP _ast2ast_randomStuff1() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(randomStuff1());
    return rcpp_result_gen;
END_RCPP
}
// randomStuff2
SEXP randomStuff2(SEXP aSEXP);
RcppExport SEXP _ast2ast_randomStuff2(SEXP aSEXPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type aSEXP(aSEXPSEXP);
    rcpp_result_gen = Rcpp::wrap(randomStuff2(aSEXP));
    return rcpp_result_gen;
END_RCPP
}
// randomStuff3
SEXP randomStuff3(SEXP aSEXP);
RcppExport SEXP _ast2ast_randomStuff3(SEXP aSEXPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type aSEXP(aSEXPSEXP);
    rcpp_result_gen = Rcpp::wrap(randomStuff3(aSEXP));
    return rcpp_result_gen;
END_RCPP
}
// addTest
SEXP addTest(SEXP aSEXP, SEXP typeTest);
RcppExport SEXP _ast2ast_addTest(SEXP aSEXPSEXP, SEXP typeTestSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type aSEXP(aSEXPSEXP);
    Rcpp::traits::input_parameter< SEXP >::type typeTest(typeTestSEXP);
    rcpp_result_gen = Rcpp::wrap(addTest(aSEXP, typeTest));
    return rcpp_result_gen;
END_RCPP
}
// minusTest
SEXP minusTest(SEXP aSEXP, SEXP typeTest);
RcppExport SEXP _ast2ast_minusTest(SEXP aSEXPSEXP, SEXP typeTestSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type aSEXP(aSEXPSEXP);
    Rcpp::traits::input_parameter< SEXP >::type typeTest(typeTestSEXP);
    rcpp_result_gen = Rcpp::wrap(minusTest(aSEXP, typeTest));
    return rcpp_result_gen;
END_RCPP
}
// divideTest
SEXP divideTest(SEXP aSEXP, SEXP typeTest);
RcppExport SEXP _ast2ast_divideTest(SEXP aSEXPSEXP, SEXP typeTestSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type aSEXP(aSEXPSEXP);
    Rcpp::traits::input_parameter< SEXP >::type typeTest(typeTestSEXP);
    rcpp_result_gen = Rcpp::wrap(divideTest(aSEXP, typeTest));
    return rcpp_result_gen;
END_RCPP
}
// timesTest
SEXP timesTest(SEXP aSEXP, SEXP typeTest);
RcppExport SEXP _ast2ast_timesTest(SEXP aSEXPSEXP, SEXP typeTestSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type aSEXP(aSEXPSEXP);
    Rcpp::traits::input_parameter< SEXP >::type typeTest(typeTestSEXP);
    rcpp_result_gen = Rcpp::wrap(timesTest(aSEXP, typeTest));
    return rcpp_result_gen;
END_RCPP
}
// mixedStuffTest
SEXP mixedStuffTest(SEXP aSEXP, SEXP typeTest);
RcppExport SEXP _ast2ast_mixedStuffTest(SEXP aSEXPSEXP, SEXP typeTestSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type aSEXP(aSEXPSEXP);
    Rcpp::traits::input_parameter< SEXP >::type typeTest(typeTestSEXP);
    rcpp_result_gen = Rcpp::wrap(mixedStuffTest(aSEXP, typeTest));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ast2ast_bubbleSort", (DL_FUNC) &_ast2ast_bubbleSort, 1},
    {"_ast2ast_fibonacci", (DL_FUNC) &_ast2ast_fibonacci, 0},
    {"_ast2ast_randomStuff1", (DL_FUNC) &_ast2ast_randomStuff1, 0},
    {"_ast2ast_randomStuff2", (DL_FUNC) &_ast2ast_randomStuff2, 1},
    {"_ast2ast_randomStuff3", (DL_FUNC) &_ast2ast_randomStuff3, 1},
    {"_ast2ast_addTest", (DL_FUNC) &_ast2ast_addTest, 2},
    {"_ast2ast_minusTest", (DL_FUNC) &_ast2ast_minusTest, 2},
    {"_ast2ast_divideTest", (DL_FUNC) &_ast2ast_divideTest, 2},
    {"_ast2ast_timesTest", (DL_FUNC) &_ast2ast_timesTest, 2},
    {"_ast2ast_mixedStuffTest", (DL_FUNC) &_ast2ast_mixedStuffTest, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_ast2ast(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
