// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/ast2ast_types.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// getXPtrBorrowTest
SEXP getXPtrBorrowTest();
RcppExport SEXP _ast2ast_getXPtrBorrowTest() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getXPtrBorrowTest());
    return rcpp_result_gen;
END_RCPP
}
// callTestBorrow
SEXP callTestBorrow(Rcpp::XPtr<fp> inp, Rcpp::NumericVector a_, double b, bool mat, int nrow, int ncol);
RcppExport SEXP _ast2ast_callTestBorrow(SEXP inpSEXP, SEXP a_SEXP, SEXP bSEXP, SEXP matSEXP, SEXP nrowSEXP, SEXP ncolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<fp> >::type inp(inpSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a_(a_SEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< bool >::type mat(matSEXP);
    Rcpp::traits::input_parameter< int >::type nrow(nrowSEXP);
    Rcpp::traits::input_parameter< int >::type ncol(ncolSEXP);
    rcpp_result_gen = Rcpp::wrap(callTestBorrow(inp, a_, b, mat, nrow, ncol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ast2ast_getXPtrBorrowTest", (DL_FUNC) &_ast2ast_getXPtrBorrowTest, 0},
    {"_ast2ast_callTestBorrow", (DL_FUNC) &_ast2ast_callTestBorrow, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_ast2ast(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
