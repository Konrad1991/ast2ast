// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/ast2ast_types.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// test_basestore
void test_basestore();
RcppExport SEXP _ast2ast_test_basestore() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    test_basestore();
    return R_NilValue;
END_RCPP
}
// test_arithmetic
void test_arithmetic();
RcppExport SEXP _ast2ast_test_arithmetic() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    test_arithmetic();
    return R_NilValue;
END_RCPP
}
// test_comparison
void test_comparison();
RcppExport SEXP _ast2ast_test_comparison() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    test_comparison();
    return R_NilValue;
END_RCPP
}
// test_borrow
void test_borrow();
RcppExport SEXP _ast2ast_test_borrow() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    test_borrow();
    return R_NilValue;
END_RCPP
}
// test_cmr
void test_cmr();
RcppExport SEXP _ast2ast_test_cmr() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    test_cmr();
    return R_NilValue;
END_RCPP
}
// test_coca
void test_coca();
RcppExport SEXP _ast2ast_test_coca() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    test_coca();
    return R_NilValue;
END_RCPP
}
// test_colon
void test_colon();
RcppExport SEXP _ast2ast_test_colon() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    test_colon();
    return R_NilValue;
END_RCPP
}
// test_concepts
void test_concepts();
RcppExport SEXP _ast2ast_test_concepts() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    test_concepts();
    return R_NilValue;
END_RCPP
}
// isNa_tests
void isNa_tests();
RcppExport SEXP _ast2ast_isNa_tests() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    isNa_tests();
    return R_NilValue;
END_RCPP
}
// isInf_tests
void isInf_tests();
RcppExport SEXP _ast2ast_isInf_tests() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    isInf_tests();
    return R_NilValue;
END_RCPP
}
// length_tests
void length_tests();
RcppExport SEXP _ast2ast_length_tests() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    length_tests();
    return R_NilValue;
END_RCPP
}
// dim_tests
void dim_tests();
RcppExport SEXP _ast2ast_dim_tests() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    dim_tests();
    return R_NilValue;
END_RCPP
}
// test_matrices
void test_matrices();
RcppExport SEXP _ast2ast_test_matrices() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    test_matrices();
    return R_NilValue;
END_RCPP
}
// test_rep
void test_rep();
RcppExport SEXP _ast2ast_test_rep() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    test_rep();
    return R_NilValue;
END_RCPP
}
// test_vector_subsetting
void test_vector_subsetting();
RcppExport SEXP _ast2ast_test_vector_subsetting() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    test_vector_subsetting();
    return R_NilValue;
END_RCPP
}
// test_arithmetic_unary
void test_arithmetic_unary();
RcppExport SEXP _ast2ast_test_arithmetic_unary() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    test_arithmetic_unary();
    return R_NilValue;
END_RCPP
}
// test_vector_numeric
void test_vector_numeric();
RcppExport SEXP _ast2ast_test_vector_numeric() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    test_vector_numeric();
    return R_NilValue;
END_RCPP
}
// test_vector_int
void test_vector_int();
RcppExport SEXP _ast2ast_test_vector_int() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    test_vector_int();
    return R_NilValue;
END_RCPP
}
// test_vector_bool
void test_vector_bool();
RcppExport SEXP _ast2ast_test_vector_bool() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    test_vector_bool();
    return R_NilValue;
END_RCPP
}
// test_vector_vector
void test_vector_vector();
RcppExport SEXP _ast2ast_test_vector_vector() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    test_vector_vector();
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ast2ast_test_basestore", (DL_FUNC) &_ast2ast_test_basestore, 0},
    {"_ast2ast_test_arithmetic", (DL_FUNC) &_ast2ast_test_arithmetic, 0},
    {"_ast2ast_test_comparison", (DL_FUNC) &_ast2ast_test_comparison, 0},
    {"_ast2ast_test_borrow", (DL_FUNC) &_ast2ast_test_borrow, 0},
    {"_ast2ast_test_cmr", (DL_FUNC) &_ast2ast_test_cmr, 0},
    {"_ast2ast_test_coca", (DL_FUNC) &_ast2ast_test_coca, 0},
    {"_ast2ast_test_colon", (DL_FUNC) &_ast2ast_test_colon, 0},
    {"_ast2ast_test_concepts", (DL_FUNC) &_ast2ast_test_concepts, 0},
    {"_ast2ast_isNa_tests", (DL_FUNC) &_ast2ast_isNa_tests, 0},
    {"_ast2ast_isInf_tests", (DL_FUNC) &_ast2ast_isInf_tests, 0},
    {"_ast2ast_length_tests", (DL_FUNC) &_ast2ast_length_tests, 0},
    {"_ast2ast_dim_tests", (DL_FUNC) &_ast2ast_dim_tests, 0},
    {"_ast2ast_test_matrices", (DL_FUNC) &_ast2ast_test_matrices, 0},
    {"_ast2ast_test_rep", (DL_FUNC) &_ast2ast_test_rep, 0},
    {"_ast2ast_test_vector_subsetting", (DL_FUNC) &_ast2ast_test_vector_subsetting, 0},
    {"_ast2ast_test_arithmetic_unary", (DL_FUNC) &_ast2ast_test_arithmetic_unary, 0},
    {"_ast2ast_test_vector_numeric", (DL_FUNC) &_ast2ast_test_vector_numeric, 0},
    {"_ast2ast_test_vector_int", (DL_FUNC) &_ast2ast_test_vector_int, 0},
    {"_ast2ast_test_vector_bool", (DL_FUNC) &_ast2ast_test_vector_bool, 0},
    {"_ast2ast_test_vector_vector", (DL_FUNC) &_ast2ast_test_vector_vector, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_ast2ast(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
